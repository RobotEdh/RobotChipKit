WiFiUDPEchoClient 1.0

0.  Select the hardware library that matches the network adaptor you are using. Make sure to look in the hardware library
    header file to see exactly how to configure your board; for example there may be some jumpers to set. If you have
    a network adaptor physically mounted on the chipKIT board, then comment out ALL hardware libraries as the correct software
    will be included with the MPIDE selection of the chipKIT board. For example, the MX7cK has an SMSC-8720 phy on the board
    and uses the MX7 internal network MAC, no hardware library is needed for the MX7cK.

            /************************************************************************/
            /*                                                                      */
            /*              Include ONLY 1 hardware library that matches            */
            /*              the network hardware you are using                      */
            /*                                                                      */
            /*              Refer to the hardware library header file               */
            /*              for supported boards and hardware configurations        */
            /*                                                                      */
            /************************************************************************/
            // #include <WiFiShieldOrPmodWiFi.h>                       // This is for the MRF24WBxx on a pmodWiFi or WiFiShield
            #include <WiFiShieldOrPmodWiFi_G.h>                     // This is for the MRF24WGxx on a pmodWiFi or WiFiShield

1.  Edit the WiFiUDPEchoClient.pde to have the correct IP address of your PC server. You probably only need to 
    Change szIPServer as the port number is the default port.

            /************************************************************************/
            /*                                                                      */
            /*              SET THESE VALUES FOR YOUR NETWORK                       */
            /*                                                                      */
            /************************************************************************/

            char * szIPServer = "192.168.1.180";
            unsigned short portServer = DNETcK::iPersonalPorts44 + 400;     // port 44400

2.  Then modify the szSsid to the SSID of your WiFi network.

            // Specify the SSID
            const char * szSsid = "chipKIT";

3.  Also uncomment the security type that you are using on your WiFi network.
    If you are using OPEN security, then comment all of the secruity types out.

            // select 1 for the security you want, or none for no security
            #define USE_WPA2_PASSPHRASE
            //#define USE_WPA2_KEY
            //#define USE_WEP40
            //#define USE_WEP104
            //#define USE_WF_CONFIG_H

4.  Scroll down to the security type that you are using, and provide the appropriate
    Key information. You only need to update the section for the security type that you
    are using. If you are using WEP, you only have to provide the key for the index
    you are using, make sure you also change the key index (iWEPkey)
    
    If you are using WPA or WPA2 with a pass phrase, understand that it will take
    about 30 seconds for the MRF24WB0MA to calculate the key before the WiFi
    connection can be made. What this means is, your sketch will appear to hang for
    about 30 seconds, so give your sketch a good 40-50 seconds to start before thinking
    anything is wrong. 

            // modify the security key to what you have.
            #if defined(USE_WPA2_PASSPHRASE)

                const char * szPassPhrase = "Digilent";
                #define WiFiConnectMacro() DWIFIcK::connect(szSsid, szPassPhrase, &status)

            #elif defined(USE_WPA2_KEY)

                DWIFIcK::WPA2KEY key = { 0x27, 0x2C, 0x89, 0xCC, 0xE9, 0x56, 0x31, 0x1E, 
                                        0x3B, 0xAD, 0x79, 0xF7, 0x1D, 0xC4, 0xB9, 0x05, 
                                        0x7A, 0x34, 0x4C, 0x3E, 0xB5, 0xFA, 0x38, 0xC2, 
                                        0x0F, 0x0A, 0xB0, 0x90, 0xDC, 0x62, 0xAD, 0x58 };
                #define WiFiConnectMacro() DWIFIcK::connect(szSsid, key, &status)

            #elif defined(USE_WEP40)

                const int iWEPKey = 0;
                DWIFIcK::WEP40KEY keySet = {    0xBE, 0xC9, 0x58, 0x06, 0x97,     // Key 0
                                                0x00, 0x00, 0x00, 0x00, 0x00,     // Key 1
                                                0x00, 0x00, 0x00, 0x00, 0x00,     // Key 2
                                                0x00, 0x00, 0x00, 0x00, 0x00 };   // Key 3
                #define WiFiConnectMacro() DWIFIcK::connect(szSsid, keySet, iWEPKey, &status)

            #elif defined(USE_WEP104)

                const int iWEPKey = 0;
                DWIFIcK::WEP104KEY keySet = {   0x3E, 0xCD, 0x30, 0xB2, 0x55, 0x2D, 0x3C, 0x50, 0x52, 0x71, 0xE8, 0x83, 0x91,   // Key 0
                                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // Key 1
                                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // Key 2
                                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // Key 3
                #define WiFiConnectMacro() DWIFIcK::connect(szSsid, keySet, iWEPKey, &status)

            #elif defined(USE_WF_CONFIG_H)

                #define WiFiConnectMacro() DWIFIcK::connect(0, &status)

            #else   // no security - OPEN

                #define WiFiConnectMacro() DWIFIcK::connect(szSsid, &status)

            #endif
   
        //******************************************************************************************
        //******************************************************************************************
        //***************************** END OF CONFIGURATION ***************************************
        //******************************************************************************************
        //******************************************************************************************

5.  Under ...\libraries\DNETcK\examples\UDPEchoClient\PCCode start the UDPEchoServer, once started the command window should look something like:

            UDPEchoServer Version 1.0.4414.23751
            Digilent, Copyright 2011

            Listening on port: 44400.

6.  Build and upload WiFiUDPEchoClient.pde; before opening the serial monitor, wait about 10-50 seconds after the sketch is done
    uploading (depending on if you are using a pass phrase) and you should see something like the following in the TCPEchoServer 
    command window:

            UDPEchoServer Version 1.0.4505.28267
            Digilent, Copyright 2011

            Listening on port: 44400.
            Datagram detected:
            *Wrote from udpClient.writeDatagram*
            Listening on port: 44400.

7.  Open the serial monitor at 9600 baud to restart the sketch, after about 10-50 seconds your serial monitor 
    should display something like:

            WiFiUDPEchoClient 1.0
            Digilent, Copyright 2012

            Connection Created, ConID = 1
            Writing out Datagram
            Waiting to see if a datagram comes back:
            *Wrote from udpClient.writeDatagram*
            Done waiting, assuming nothing more is coming

            Closing udpClient, Done with sketch.

8.  Your command window should look something like:

            UDPEchoServer Version 1.0.4505.28267
            Digilent, Copyright 2011

            Listening on port: 44400.
            Datagram detected:
            *Wrote from udpClient.writeDatagram*
            Listening on port: 44400.
            Datagram detected:
            *Wrote from udpClient.writeDatagram*
            Listening on port: 44400.

9.  Shutdown your sketch.
10. Shutdown the UDPEchoServer by typing ^C in the command window.
